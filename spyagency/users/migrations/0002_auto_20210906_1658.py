# Generated by Django 3.2.6 on 2021-09-06 21:58
from random import randint

from django.contrib.auth.models import Permission
from django.db import migrations
from django.db.models.aggregates import Count
from utils.names_generator import get_names


def apply_migration(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    User = apps.get_model("users", "User")
    Group.objects.bulk_create(
        [
            Group(name=u"big_boss"),
            Group(name=u"managers"),
        ]
    )

    all_groups = Group.objects.all()
    all_permissions = Permission.objects.filter(content_type__app_label="users")
    # big boss
    giuseppi = User.objects.create_user(
        email="giuseppi@kgb.ru",
        username="giuseppi@kgb.ru",
        password="kgbRusia*",
        gender=2,
        is_superuser=True,
        is_staff=True,
        is_active=True,
    )
    giuseppi.groups.add(*all_groups)
    giuseppi.user_permissions.add(*all_permissions)
    giuseppi.save()

    # managers
    manager_group = all_groups.filter(name__iexact="managers")
    manager_permissions = all_permissions.filter(name__in=["Manager's menu", "Hitmen menu"])
    users = get_names("managers", 3)
    for user in users:
        manager = User.objects.create_user(**user)
        manager.groups.add(*manager_group)
        manager.user_permissions.add(*manager_permissions)
        manager.save()
        new_manager_group = Group.objects.create(name="team-manager-{}".format(str(manager.pk).zfill(3)))
        manager.groups.add(new_manager_group)

    killers = get_names("killers", 9)
    groups = Group.objects.exclude(id__in=[1, 2])
    permission_killers = manager_permissions.filter(name__in=["Hitmen menu"])
    selection = groups.aggregate(count=Count("id"))["count"]

    for kill in killers:
        random_index = randint(0, selection - 1)
        killer = User.objects.create_user(**kill)
        my_group = groups[random_index]
        killer.save()
        killer.groups.add(my_group)
        killer.user_permissions.add(*permission_killers)

    giuseppi.groups.add(*groups)


def revert_migration(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    User = apps.get_model("users", "User")
    Group.objects.filter(
        name__in=[
            u"big_boss",
            u"managers",
        ]
    ).delete()

    User.objects.exclude(pk=1).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(apply_migration, revert_migration),
    ]
